{
1. etcd compact behaviour
https://etcd.io/docs/v3.5/op-guide/maintenance/#auto-compaction

2. client verse connection(it seems the controller-runtime provide 1 connections...)

client -> typedClient -> clientCache.newResource() ->  RESTClientForGVK -> RESTClientFor -> RESTClient(client-go)

clientCache.newResource()
/Users/ianzhang/golang/pkg/mod/sigs.k8s.io/controller-runtime@v0.9.2/pkg/client/client_cache.go:62

NewRESTClient
/Users/ianzhang/golang/pkg/mod/k8s.io/client-go@v0.21.2/rest/client.go:81:6-81:16

RESTClientForGVK
/Users/ianzhang/golang/pkg/mod/sigs.k8s.io/controller-runtime@v0.9.2/pkg/client/apiutil/apimachinery.go:120

RESTClient
/Users/ianzhang/golang/pkg/mod/k8s.io/client-go@v0.21.2/rest/config.go:306

http.DefaultTransport
// DefaultTransport is the default implementation of Transport and is
// used by DefaultClient. It establishes network connections as needed
// and caches them for reuse by subsequent calls. It uses HTTP proxies
// as directed by the $HTTP_PROXY and $NO_PROXY (or $http_proxy and
// $no_proxy) environment variables.
/usr/local/Cellar/go/1.16.3/libexec/src/net/http/transport.go:42

how to increase the max connection?
https://www.loginradius.com/blog/async/tune-the-go-http-client-for-high-performance/


3. etcd metrics
https://etcd.io/docs/v3.4/metrics/etcd-metrics-v3.4.8.txt

etcd_object_counts{resource=~"manifestwork.*"}
sum(rate(apiserver_request_total{resource ="manifestworks"}[1m])) by(resource, verb)

etcd_mvcc_db_total_size_in_use_in_bytes
etcd_debugging_mvcc_db_compaction_keys_total
}

- size
- connection
	- single connection (api server limit, retry)
	- multiple

ulimit -n


ztp-1k-prometheus-backup

{ - apf
https://itnext.io/kubernetes-api-priority-and-fairness-b1ef2b8a26a2
https://github.com/kubernetes-client/python/blob/master/kubernetes/docs/V1alpha1LimitedPriorityLevelConfiguration.md

https://cloud.redhat.com/blog/surviving-the-api-storm-with-api-priority-fairness

kubectl apply -f policy-template.yaml --v=8 2>&1 | grep -i x-kubernetes-pf
kubectl get flowschemas -o custom-columns="uid:{metadata.uid},name:{metadata.name}"
kubectl get prioritylevelconfiguration -o custom-columns="uid:{metadata.uid},name:{metadata.name}"

}

go tool pprof -http=:8989 http://localhost:6060/debug/pprof/goroutine


oc rsh -n openshift-etcd etcd-e24-h05-000-r640.rdu2.scalelab.redhat.com

unset ETCDCTL_ENDPOINTS

etcdctl compact $(etcdctl endpoint status --write-out="json" |  egrep -o '"revision":[0-9]*' | egrep -o '[0-9]*' -m1)

date && etcdctl --command-timeout=120s defrag

https://10.0.173.119:2379,https://10.0.135.152:2379,https://10.0.153.249:2379